/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        homey_left: homey_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <270>;
            hold-trigger-on-release;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <170>;
            hold-trigger-key-positions = <39 40 41 32 8 20 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
        };

        homey_right: homey_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <270>;
            hold-trigger-on-release;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <170>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        shift_left: shift_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_SHIFT_SHIFT";
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <80>;
            hold-trigger-key-positions = <32 8 20 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 38 37 36 39 40 41>;
        };

        shift_right: shift_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT_SHIFT_SHIFT";
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <80>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q                     &kp W                       &kp E                   &kp R                       &kp T           &kp Y        &kp U                         &kp I                     &kp O                         &kp P                               &none
&none  &shift_left LEFT_SHIFT A  &homey_left LEFT_CONTROL S  &homey_left LEFT_ALT D  &homey_left LEFT_COMMAND F  &kp G           &kp H        &homey_right RIGHT_COMMAND J  &homey_right RIGHT_ALT K  &homey_right RIGHT_CONTROL L  &shift_right RIGHT_SHIFT SEMICOLON  &none
&none  &kp Z                     &kp X                       &kp C                   &kp V                       &kp B           &kp N        &kp M                         &kp COMMA                 &kp DOT                       &kp FSLH                            &none
                                                             &lt 3 LEFT_COMMAND      &lt 1 ESCAPE                &lt 1 ESCAPE    &lt 2 SPACE  &lt 2 SPACE                   &kp RALT
            >;
        };

        nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp LOCKING_CAPS  &none         &none         &none         &none           &none     &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp BACKSPACE  &none
&none  &kp TAB           &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN    &kp UP             &kp RIGHT        &kp ENTER      &trans
&none  &kp GRAVE         &none         &trans        &trans        &trans          &trans    &trans      &trans             &trans           &trans         &trans
                                       &trans        &trans        &trans          &trans    &trans      &trans
            >;
        };

        numbers {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5           &kp F6        &kp F7        &kp F8            &kp F9             &kp F10       &none
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5           &kp NUMBER_6  &kp NUMBER_7  &kp N8            &kp N9             &kp NUMBER_0  &none
&none  &kp GRAVE     &trans        &kp F11       &kp F12       &kp BACKSLASH    &kp MINUS     &kp EQUAL     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SQT       &none
                                   &trans        &trans        &trans           &trans        &trans        &trans
            >;
        };

        system {
            bindings = <
&trans  &out OUT_BLE  &out OUT_USB  &out OUT_TOG  &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
